// Auto-generated types for i18n messages
// This file is generated by scripts/generate-i18n-types.ts
// Do not edit manually - run 'npm run generate:i18n-types' to regenerate

import type { Locale } from './config'

// Base message structure type
export interface Messages {
  common: {
    theme: {
      toggle: string
      light: string
      dark: string
      system: string
    }
    language: {
      switch: string
      english: string
      spanish: string
      french: string
      german: string
    }
  }
  navigation: {
    home: string
    about: string
    contact: string
    settings: string
  }
  home: {
    title: string
    subtitle: string
    description: string
    features: {
      title: string
      testing: string
      i18n: string
      theme: string
      typescript: string
      tailwind: string
      components: string
    }
  }
  errors: {
    generic: string
    notFound: string
    loading: string
    retry: string
  }
}

// Flat key mapping for dot notation access
export interface MessageKeys {
  'common.theme.toggle': string
  'common.theme.light': string
  'common.theme.dark': string
  'common.theme.system': string
  'common.language.switch': string
  'common.language.english': string
  'common.language.spanish': string
  'common.language.french': string
  'common.language.german': string
  'navigation.home': string
  'navigation.about': string
  'navigation.contact': string
  'navigation.settings': string
  'home.title': string
  'home.subtitle': string
  'home.description': string
  'home.features.title': string
  'home.features.testing': string
  'home.features.i18n': string
  'home.features.theme': string
  'home.features.typescript': string
  'home.features.tailwind': string
  'home.features.components': string
  'errors.generic': string
  'errors.notFound': string
  'errors.loading': string
  'errors.retry': string
}

// Namespace keys
export type NamespaceKeys = 'common' | 'navigation' | 'home' | 'errors'

// All possible translation keys
export type TranslationKey = keyof MessageKeys

// Helper type for nested keys within a namespace
export type NestedKeys<T extends NamespaceKeys> = T extends keyof Messages
  ? keyof Messages[T] extends string
  ? keyof Messages[T]
  : never
  : never

// Type for translation function with namespace
export type TranslationFunction<T extends NamespaceKeys> = (
  key: NestedKeys<T>,
  values?: Record<string, any>
) => string

// Type for global translation function
export type GlobalTranslationFunction = (
  key: TranslationKey,
  values?: Record<string, any>
) => string

// Export locale type for convenience
export type { Locale }

// Message validation type
export type ValidateMessages<T> = T extends Messages ? T : never

// Type-safe key builder
export function buildTranslationKey<T extends NamespaceKeys>(
  namespace: T,
  key: NestedKeys<T>,
): string {
  return `${namespace}.${String(key)}`
}
